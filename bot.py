#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, BotCommand
from aiogram.utils.markdown import hbold
from aiogram.enums import ParseMode

from replicas import GREETINGS, COMMANDS, RESPONSES, ERRORS, SUCCESS
from alchemist import WordAlchemist
from database import AsyncWordDatabase

from leaderboard import MongoDBManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AlchemyBot:
    def __init__(self, token):
        logger.info("Initializing AlchemyBot")
        self.bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
        self.dp = Dispatcher()
        self.db = AsyncWordDatabase("word_embeddings.faiss", "words.list")
        self.alchemist = WordAlchemist(self.db)
        self.leaderboard = MongoDBManager("leaderboard")
        self.leaderboard.ensure_indexes()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        self.dp.include_router(self.setup_handlers())

    async def set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
        commands = [
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
            BotCommand(command="commands", description="üìú –í—Å–ø–æ–º–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã"),
            BotCommand(command="similar", description="üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª–æ–≤"),
            BotCommand(command="analogy", description="‚öó –†–µ—à–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—é"),
            BotCommand(command="mix", description="üîÑ –°–º–µ—à–∞—Ç—å —Å–ª–æ–≤–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏"),
            BotCommand(command="between", description="‚áÑ –ù–∞–π—Ç–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞"),
            BotCommand(command="leaders", description="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª—É—á—à–∏—Ö –∞–ª—Ö–∏–º–∏–∫–æ–≤")
        ]
        await self.bot.set_my_commands(commands)

    async def check_similarity(self, user, word, similarity):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–¥—Å—Ç–≤–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        if not await self.leaderboard.get_user(user.id):
            await self.leaderboard.create_user(user.id, user.first_name)
        
        if similarity > 0.8:  # –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
            await self.leaderboard.increment_score(user.id, 1)
            await self.leaderboard.add_words(user.id, [word])
            return True
        return False

    def setup_handlers(self):
        router = Router()
        
        @router.message(Command("start"))
        async def start(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            logger.info(f"Start command from user {message.from_user.id}")
            try:
                await message.answer(GREETINGS['start'].format(user=hbold(message.from_user.first_name)))
            except Exception as e:
                logger.error(f"Error in start command: {e}")
                await message.answer(ERRORS['default'])

        @router.message(Command("help"))
        async def help(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
            logger.info(f"Help command from user {message.from_user.id}")
            try:
                help_text = GREETINGS['help'] + "\n\n"
                for cmd, data in COMMANDS.items():
                    help_text += f"‚Ä¢ {data['description']}\n–ü—Ä–∏–º–µ—Ä: {data['example']}\n\n"
                help_text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ /mix:\n"
                help_text += "  /mix [–º–Ω–æ–∂–∏—Ç–µ–ª—å] —Å–ª–æ–≤–æ [–æ–ø–µ—Ä–∞—Ç–æ—Ä] [–º–Ω–æ–∂–∏—Ç–µ–ª—å] —Å–ª–æ–≤–æ ...\n"
                help_text += "  –ü—Ä–∏–º–µ—Ä: /mix 0.5 –∫–æ—Ä–æ–≤–∞ + 0.1 –±—ã–∫ - 0.2 –≤—ã–º—è\n\n"
                help_text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ /similar:\n"
                help_text += "  /similar —Å–ª–æ–≤–æ [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]\n"
                help_text += "  –ü—Ä–∏–º–µ—Ä: /similar –∫–æ—à–∫–∞ 10\n\n"
                await message.answer(help_text)
            except Exception as e:
                logger.error(f"Error in help command: {e}")
                await message.answer(ERRORS['default'])

        @router.message(Command("similar"))
        async def similar(message: Message):
            """–ü–æ–∏—Å–∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª–æ–≤"""
            try:
                args = message.text.split()[1:]
                if len(args) < 1:
                    raise ValueError
                
                word = args[0].strip()
                try:
                    count = int(args[1])
                    if count > 20:
                        count = 20
                    elif count < 1:
                        count = 5
                except (IndexError, ValueError):
                    count = 5
                
                logger.info(f"Similar words search for '{word}' by user {message.from_user.id}")
                results = await self.alchemist.find_similar_words(word, k=count+1)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞ 1 –±–æ–ª—å—à–µ
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                results = [(w, s) for w, s in results if w.lower() != word.lower()][:count]
                logger.info(f"Found {len(results)} similar words for '{word}'")
                formatted = "\n".join(f"{i+1}. [{w}] ({s:.2f})" for i, (w, s) in enumerate(results))
                response = RESPONSES['similar_results'].format(
                    word=word, 
                    results=formatted
                )
                await message.answer(response)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
                if results:
                    max_similarity = max(s for _, s in results)
                    if await self.check_similarity(message.from_user, word, max_similarity):
                        await message.answer(SUCCESS['discovery'])
                
            except (ValueError, IndexError):
                await message.answer(ERRORS['missing_args'])
            except Exception as e:
                logger.exception(f"Error in similar command: {e}", exc_info=True)
                if "–°–ª–æ–≤–æ" in str(e):
                    word = str(e).split("'")[1]
                    await message.answer(
                        ERRORS['word_not_found'].format(word=word)
                    )
                else:
                    await message.answer(ERRORS['invalid_input'])

        @router.message(Command("analogy"))
        async def analogy(message: Message):
            """–†–µ—à–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–∏–π"""
            try:
                args = message.text.split()[1:]
                if len(args) != 3:
                    raise ValueError
                    
                word_a, word_b, word_c = args
                logger.info(f"Analogy request: {word_a}:{word_b}::{word_c}:? by user {message.from_user.id}")
                results = await self.alchemist.word_analogy(word_a, word_b, word_c)
                logger.info(f"Found {len(results)} analogy results")
                formatted = "\n".join(f"- {w} ({s:.2f})" for w, s in results)
                
                response = RESPONSES['analogy_results'].format(
                    word_a=word_a,
                    word_b=word_b,
                    word_c=word_c,
                    results=formatted
                )
                await message.answer(response)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
                if results:
                    max_similarity = max(s for _, s in results)
                    if await self.check_similarity(message.from_user, word_c, max_similarity):
                        await message.answer(SUCCESS['discovery'])
                
            except (ValueError, IndexError):
                await message.answer(ERRORS['missing_args'])
            except Exception as e:
                logger.exception(f"Error in analogy command: {e}", exc_info=True)
                if "–°–ª–æ–≤–æ" in str(e):
                    word = str(e).split("'")[1]
                    await message.answer(
                        ERRORS['word_not_found'].format(word=word)
                    )
                else:
                    await message.answer(ERRORS['invalid_input'])

        @router.message(Command("mix"))
        async def mix(message: Message):
            """–°–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏–∫–∏ —Å–ª–æ–≤"""
            try:
                expression = message.text.split(maxsplit=1)[1].strip()
                if not expression:
                    raise ValueError

                # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
                parts = expression.split()
                words = []
                operators = []
                multipliers = []
                current_word = ""
                current_multiplier = 1.0
                expect_word = True  # –û–∂–∏–¥–∞–µ–º —Å–ª–æ–≤–æ –∏–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å, –∞ –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä
                
                for i, part in enumerate(parts):
                    if part in ["+", "-"]:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –±—ã–ª–æ —Å–ª–æ–≤–æ
                        if not current_word.strip() and i > 0:
                            raise ValueError("–û–ø–µ—Ä–∞—Ç–æ—Ä –±–µ–∑ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞")
                        
                        operators.append(part)
                        if current_word.strip():  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
                            words.append(current_word.strip())
                            multipliers.append(current_multiplier)
                        current_word = ""
                        current_multiplier = 1.0
                        expect_word = True
                    else:
                        try:
                            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –≤ –º–Ω–æ–∂–∏—Ç–µ–ª—å
                            multiplier = float(part)
                            current_multiplier = multiplier
                        except ValueError:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É —Å–ª–æ–≤—É
                            current_word += part + " "
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if current_word.strip():
                    words.append(current_word.strip())
                    multipliers.append(current_multiplier)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ
                if not words:
                    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–ª–æ–≤–∞ –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤, –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
                if len(words) != len(multipliers):
                    raise ValueError("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π")
                
                if operators and len(operators) != len(words) - 1:
                    raise ValueError("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")

                logger.info(f"Semantic mix request for expression: {expression} by user {message.from_user.id}")
                results = await self.alchemist.semantic_mix(words, operators, multipliers)
                logger.info(f"Semantic mix completed with {len(results)} results")
                formatted = "\n".join(f"- {w} ({s:.2f})" for w, s in results)

                response = RESPONSES['mix_results'].format(
                    words=", ".join(words),
                    results=formatted
                )
                await message.answer(response)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
                if results:
                    max_similarity = max(s for _, s in results)
                    if await self.check_similarity(message.from_user, results[0][0], max_similarity):
                        await message.answer(SUCCESS['discovery'])

            except (ValueError, IndexError):
                await message.answer(ERRORS['missing_args'])
            except Exception as e:
                logger.exception(f"Error in mix command: {e}", exc_info=True)
                if "–°–ª–æ–≤–æ" in str(e):
                    word = str(e).split("'")[1]
                    await message.answer(
                        ERRORS['word_not_found'].format(word=word)
                    )
                else:
                    await message.answer(ERRORS['invalid_input'])

        @router.message(Command("between"))
        async def between(message: Message):
            """–ü–æ–∏—Å–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–ª–æ–≤"""
            try:
                args = message.text.split()[1:]
                if len(args) != 2:
                    raise ValueError
                    
                word_a, word_b = args
                logger.info(f"Between words search: {word_a} and {word_b} by user {message.from_user.id}")
                results = await self.alchemist.closest_to_line(word_a, word_b)
                logger.info(f"Found {len(results)} between words results")
                formatted = "\n".join(f"- {w} ({s:.2f})" for w, s in results)
                
                response = RESPONSES['between_results'].format(
                    word_a=word_a,
                    word_b=word_b,
                    results=formatted
                )
                await message.answer(response)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
                if results:
                    max_similarity = max(s for _, s in results)
                    if await self.check_similarity(message.from_user, results[0][0], max_similarity):
                        await message.answer(SUCCESS['discovery'])
                
            except (ValueError, IndexError):
                await message.answer(ERRORS['missing_args'])
            except Exception as e:
                logger.exception(f"Error in between command: {e}", exc_info=True)
                if "–°–ª–æ–≤–æ" in str(e):
                    word = str(e).split("'")[1]
                    await message.answer(
                        ERRORS['word_not_found'].format(word=word)
                    )
                else:
                    await message.answer(ERRORS['invalid_input'])

        @router.message(Command("commands"))
        async def show_commands(message: Message):
            """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
            logger.info(f"Commands list requested by user {message.from_user.id}")
            help_text = ""
            for cmd, data in COMMANDS.items():
                help_text += f"‚Ä¢ {data['description']}\n–ü—Ä–∏–º–µ—Ä: {data['example']}\n\n"
            await message.answer(help_text)

        @router.message(Command("leaders"))
        async def show_leaders(message: Message):
            """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
            try:
                logger.info(f"Leaderboard requested by user {message.from_user.id}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10
                leaders = await self.leaderboard.get_leaderboard(10)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await self.leaderboard.get_user(message.from_user.id)
                user_position = None
                if user:
                    all_users = await self.leaderboard.get_leaderboard(0)  # 0 = –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    user_position = next((i+1 for i, u in enumerate(all_users) 
                                        if u['user_id'] == message.from_user.id), None)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                leader_text = "üèÜ *–¢–æ–ø –∞–ª—Ö–∏–º–∏–∫–æ–≤* üèÜ\n\n"
                for i, leader in enumerate(leaders):
                    leader_text += f"{i+1}. {leader['user_name']} - {leader['score']} –æ—á–∫–æ–≤\n"
                
                if user_position:
                    leader_text += f"\n–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {user_position}"
                else:
                    leader_text += "\n–í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"
                
                await message.answer(leader_text)
                
            except Exception as e:
                logger.error(f"Error in leaders command: {e}")
                await message.answer(ERRORS['default'])

        return router

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting bot polling")
        await self.dp.start_polling(self.bot)
        logger.info("Bot polling stopped")


async def main():
    import os
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    load_dotenv()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
        
    bot = AlchemyBot(token)
    await bot.set_bot_commands()
    try:
        await bot.run()
    finally:
        await bot.bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())
